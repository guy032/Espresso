/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Trial Issues API
 * API for managing clinical trial site visit issues
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  ImportCsvBody,
  ImportResult,
  InternalErrorResponse,
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';

/**
 * Upload a CSV file to bulk import issues
 * @summary Import issues from CSV file
 */
export const importCsv = (importCsvBody: ImportCsvBody, signal?: AbortSignal) => {
  const formData = new FormData();
  formData.append(`file`, importCsvBody.file);

  return customAxiosInstance<ImportResult>({
    url: `/import/csv`,
    method: 'POST',
    headers: { 'Content-Type': 'multipart/form-data' },
    data: formData,
    signal,
  });
};

export const getImportCsvMutationOptions = <
  TError = BadRequestResponse | InternalErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importCsv>>,
    TError,
    { data: ImportCsvBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof importCsv>>,
  TError,
  { data: ImportCsvBody },
  TContext
> => {
  const mutationKey = ['importCsv'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importCsv>>,
    { data: ImportCsvBody }
  > = (props) => {
    const { data } = props ?? {};

    return importCsv(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImportCsvMutationResult = NonNullable<Awaited<ReturnType<typeof importCsv>>>;
export type ImportCsvMutationBody = ImportCsvBody;
export type ImportCsvMutationError = BadRequestResponse | InternalErrorResponse;

/**
 * @summary Import issues from CSV file
 */
export const useImportCsv = <
  TError = BadRequestResponse | InternalErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof importCsv>>,
      TError,
      { data: ImportCsvBody },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof importCsv>>,
  TError,
  { data: ImportCsvBody },
  TContext
> => {
  const mutationOptions = getImportCsvMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
