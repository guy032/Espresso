/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Trial Issues API
 * API for managing clinical trial site visit issues
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

/**
 * Severity level of the issue
 */
export type IssueSeverity = typeof IssueSeverity[keyof typeof IssueSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueSeverity = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * Current status of the issue
 */
export type IssueStatus = typeof IssueStatus[keyof typeof IssueStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueStatus = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
} as const;

export interface Issue {
  /** Unique identifier for the issue */
  id?: number;
  /**
   * Title of the issue
   * @maxLength 255
   */
  title: string;
  /** Detailed description of the issue */
  description: string;
  /**
   * Site identifier
   * @maxLength 100
   */
  site: string;
  /** Severity level of the issue */
  severity: IssueSeverity;
  /** Current status of the issue */
  status: IssueStatus;
  /** Timestamp when the issue was created */
  createdAt?: string;
  /** Timestamp when the issue was last updated */
  updatedAt?: string;
}

/**
 * Severity level of the issue
 */
export type IssueCreateInputSeverity = typeof IssueCreateInputSeverity[keyof typeof IssueCreateInputSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueCreateInputSeverity = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * Initial status of the issue
 */
export type IssueCreateInputStatus = typeof IssueCreateInputStatus[keyof typeof IssueCreateInputStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueCreateInputStatus = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
} as const;

export interface IssueCreateInput {
  /**
   * Title of the issue
   * @maxLength 255
   */
  title: string;
  /** Detailed description of the issue */
  description: string;
  /**
   * Site identifier
   * @maxLength 100
   */
  site: string;
  /** Severity level of the issue */
  severity: IssueCreateInputSeverity;
  /** Initial status of the issue */
  status?: IssueCreateInputStatus;
}

/**
 * Severity level of the issue
 */
export type IssueUpdateInputSeverity = typeof IssueUpdateInputSeverity[keyof typeof IssueUpdateInputSeverity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueUpdateInputSeverity = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * Current status of the issue
 */
export type IssueUpdateInputStatus = typeof IssueUpdateInputStatus[keyof typeof IssueUpdateInputStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IssueUpdateInputStatus = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
} as const;

export interface IssueUpdateInput {
  /**
   * Title of the issue
   * @maxLength 255
   */
  title?: string;
  /** Detailed description of the issue */
  description?: string;
  /**
   * Site identifier
   * @maxLength 100
   */
  site?: string;
  /** Severity level of the issue */
  severity?: IssueUpdateInputSeverity;
  /** Current status of the issue */
  status?: IssueUpdateInputStatus;
}

export type DashboardCountsStatusCounts = {
  open?: number;
  in_progress?: number;
  resolved?: number;
};

export type DashboardCountsSeverityCounts = {
  minor?: number;
  major?: number;
  critical?: number;
};

export interface DashboardCounts {
  statusCounts?: DashboardCountsStatusCounts;
  severityCounts?: DashboardCountsSeverityCounts;
  totalIssues?: number;
}

export interface ImportResult {
  success?: boolean;
  message?: string;
  imported?: number;
  skipped?: number;
  errors?: string[];
}

export interface ValidationError {
  /** Field that failed validation */
  field?: string;
  /** Validation error message */
  message?: string;
  /** The invalid value provided */
  value?: unknown;
}

export interface ApiError {
  /** Error category */
  error?: string;
  /** Error message */
  message?: string;
  details?: ValidationError[];
  /** Request path */
  path?: string;
  /** HTTP method */
  method?: string;
}

export type HealthStatusStatus = typeof HealthStatusStatus[keyof typeof HealthStatusStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HealthStatusStatus = {
  healthy: 'healthy',
  unhealthy: 'unhealthy',
} as const;

export interface HealthStatus {
  status?: HealthStatusStatus;
  timestamp?: string;
  environment?: string;
}

/**
 * Resource not found
 */
export type NotFoundResponse = ApiError;

/**
 * Bad request
 */
export type BadRequestResponse = ApiError;

/**
 * Internal server error
 */
export type InternalErrorResponse = ApiError;

export type StatusFilterParameter = typeof StatusFilterParameter[keyof typeof StatusFilterParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusFilterParameter = {
  open: 'open',
  in_progress: 'in_progress',
  resolved: 'resolved',
} as const;

export type SeverityFilterParameter = typeof SeverityFilterParameter[keyof typeof SeverityFilterParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeverityFilterParameter = {
  minor: 'minor',
  major: 'major',
  critical: 'critical',
} as const;

/**
 * Filter by site
 */
export type SiteFilterParameter = string;

/**
 * Search in title (case-insensitive)
 */
export type SearchQueryParameter = string;

export type SortFieldParameter = typeof SortFieldParameter[keyof typeof SortFieldParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortFieldParameter = {
  id: 'id',
  title: 'title',
  severity: 'severity',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type SortOrderParameter = typeof SortOrderParameter[keyof typeof SortOrderParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortOrderParameter = {
  asc: 'asc',
  desc: 'desc',
} as const;

/**
 * Page number (1-based)
 */
export type PageNumberParameter = number;

/**
 * Items per page
 */
export type PageLimitParameter = number;

export type ListIssuesParams = {
/**
 * Filter by status
 */
status?: StatusFilterParameter;
/**
 * Filter by severity
 */
severity?: SeverityFilterParameter;
/**
 * Filter by site
 */
site?: SiteFilterParameter;
/**
 * Search in title (case-insensitive)
 */
search?: SearchQueryParameter;
/**
 * Sort field
 */
sort?: SortFieldParameter;
/**
 * Sort order
 */
order?: SortOrderParameter;
/**
 * Page number (1-based)
 * @minimum 1
 */
page?: PageNumberParameter;
/**
 * Items per page
 * @minimum 1
 * @maximum 100
 */
limit?: PageLimitParameter;
};

export type DeleteIssue200 = {
  message?: string;
};

export type ImportCsvBody = {
  /** CSV file with issues data */
  file: Blob;
};

/**
 * Retrieve a list of issues with optional filtering, sorting, and pagination
 * @summary List all issues with optional filters
 */
export const listIssues = <TData = AxiosResponse<Issue[]>>(
    params?: ListIssuesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/issues`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Create a new issue in the system
 * @summary Create a new issue
 */
export const createIssue = <TData = AxiosResponse<Issue>>(
    issueCreateInput: IssueCreateInput, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/issues`,
      issueCreateInput,options
    );
  }

/**
 * Retrieve a specific issue by its ID
 * @summary Get issue by ID
 */
export const getIssueById = <TData = AxiosResponse<Issue>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/issues/${id}`,options
    );
  }

/**
 * Update an existing issue by ID
 * @summary Update an issue
 */
export const updateIssue = <TData = AxiosResponse<Issue>>(
    id: number,
    issueUpdateInput: IssueUpdateInput, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/issues/${id}`,
      issueUpdateInput,options
    );
  }

/**
 * Delete an issue by ID
 * @summary Delete an issue
 */
export const deleteIssue = <TData = AxiosResponse<DeleteIssue200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/issues/${id}`,options
    );
  }

/**
 * Quick action to set issue status to resolved
 * @summary Resolve an issue
 */
export const resolveIssue = <TData = AxiosResponse<Issue>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/issues/${id}/resolve`,undefined,options
    );
  }

/**
 * Retrieve aggregated counts of issues by status and severity
 * @summary Get dashboard statistics
 */
export const getDashboard = <TData = AxiosResponse<DashboardCounts>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/dashboard`,options
    );
  }

/**
 * Upload a CSV file to bulk import issues
 * @summary Import issues from CSV file
 */
export const importCsv = <TData = AxiosResponse<ImportResult>>(
    importCsvBody: ImportCsvBody, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append(`file`, importCsvBody.file)

    return axios.default.post(
      `/import/csv`,
      formData,options
    );
  }

export type ListIssuesResult = AxiosResponse<Issue[]>
export type CreateIssueResult = AxiosResponse<Issue>
export type GetIssueByIdResult = AxiosResponse<Issue>
export type UpdateIssueResult = AxiosResponse<Issue>
export type DeleteIssueResult = AxiosResponse<DeleteIssue200>
export type ResolveIssueResult = AxiosResponse<Issue>
export type GetDashboardResult = AxiosResponse<DashboardCounts>
export type ImportCsvResult = AxiosResponse<ImportResult>
