/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Trial Issues API
 * API for managing clinical trial site visit issues
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  DeleteIssue200,
  InternalErrorResponse,
  Issue,
  IssueCreateInput,
  IssueUpdateInput,
  ListIssuesParams,
  NotFoundResponse,
} from '.././models';

import { customAxiosInstance } from '../../axios-instance';

/**
 * Retrieve a list of issues with optional filtering, sorting, and pagination
 * @summary List all issues with optional filters
 */
export const listIssues = (params?: ListIssuesParams, signal?: AbortSignal) => {
  return customAxiosInstance<Issue[]>({ url: `/issues`, method: 'GET', params, signal });
};

export const getListIssuesInfiniteQueryKey = (params?: ListIssuesParams) => {
  return ['infinite', `/issues`, ...(params ? [params] : [])] as const;
};

export const getListIssuesQueryKey = (params?: ListIssuesParams) => {
  return [`/issues`, ...(params ? [params] : [])] as const;
};

export const getListIssuesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof listIssues>>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListIssuesInfiniteQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listIssues>>> = ({ signal }) =>
    listIssues(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof listIssues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListIssuesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof listIssues>>>;
export type ListIssuesInfiniteQueryError = BadRequestResponse | InternalErrorResponse;

export function useListIssuesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listIssues>>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params: undefined | ListIssuesParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIssues>>,
          TError,
          Awaited<ReturnType<typeof listIssues>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListIssuesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listIssues>>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIssues>>,
          TError,
          Awaited<ReturnType<typeof listIssues>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListIssuesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listIssues>>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List all issues with optional filters
 */

export function useListIssuesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof listIssues>>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListIssuesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getListIssuesQueryOptions = <
  TData = Awaited<ReturnType<typeof listIssues>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListIssuesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listIssues>>> = ({ signal }) =>
    listIssues(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listIssues>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListIssuesQueryResult = NonNullable<Awaited<ReturnType<typeof listIssues>>>;
export type ListIssuesQueryError = BadRequestResponse | InternalErrorResponse;

export function useListIssues<
  TData = Awaited<ReturnType<typeof listIssues>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params: undefined | ListIssuesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIssues>>,
          TError,
          Awaited<ReturnType<typeof listIssues>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListIssues<
  TData = Awaited<ReturnType<typeof listIssues>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listIssues>>,
          TError,
          Awaited<ReturnType<typeof listIssues>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useListIssues<
  TData = Awaited<ReturnType<typeof listIssues>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary List all issues with optional filters
 */

export function useListIssues<
  TData = Awaited<ReturnType<typeof listIssues>>,
  TError = BadRequestResponse | InternalErrorResponse,
>(
  params?: ListIssuesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listIssues>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getListIssuesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new issue in the system
 * @summary Create a new issue
 */
export const createIssue = (issueCreateInput: IssueCreateInput, signal?: AbortSignal) => {
  return customAxiosInstance<Issue>({
    url: `/issues`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: issueCreateInput,
    signal,
  });
};

export const getCreateIssueMutationOptions = <
  TError = BadRequestResponse | InternalErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createIssue>>,
    TError,
    { data: IssueCreateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createIssue>>,
  TError,
  { data: IssueCreateInput },
  TContext
> => {
  const mutationKey = ['createIssue'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createIssue>>,
    { data: IssueCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createIssue(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateIssueMutationResult = NonNullable<Awaited<ReturnType<typeof createIssue>>>;
export type CreateIssueMutationBody = IssueCreateInput;
export type CreateIssueMutationError = BadRequestResponse | InternalErrorResponse;

/**
 * @summary Create a new issue
 */
export const useCreateIssue = <
  TError = BadRequestResponse | InternalErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createIssue>>,
      TError,
      { data: IssueCreateInput },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createIssue>>,
  TError,
  { data: IssueCreateInput },
  TContext
> => {
  const mutationOptions = getCreateIssueMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a specific issue by its ID
 * @summary Get issue by ID
 */
export const getIssueById = (id: number, signal?: AbortSignal) => {
  return customAxiosInstance<Issue>({ url: `/issues/${id}`, method: 'GET', signal });
};

export const getGetIssueByIdInfiniteQueryKey = (id?: number) => {
  return ['infinite', `/issues/${id}`] as const;
};

export const getGetIssueByIdQueryKey = (id?: number) => {
  return [`/issues/${id}`] as const;
};

export const getGetIssueByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getIssueById>>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIssueByIdInfiniteQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIssueById>>> = ({ signal }) =>
    getIssueById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetIssueByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getIssueById>>>;
export type GetIssueByIdInfiniteQueryError =
  | BadRequestResponse
  | NotFoundResponse
  | InternalErrorResponse;

export function useGetIssueByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getIssueById>>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIssueById>>,
          TError,
          Awaited<ReturnType<typeof getIssueById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetIssueByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getIssueById>>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIssueById>>,
          TError,
          Awaited<ReturnType<typeof getIssueById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetIssueByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getIssueById>>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get issue by ID
 */

export function useGetIssueByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getIssueById>>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetIssueByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetIssueByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getIssueById>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>>;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIssueByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIssueById>>> = ({ signal }) =>
    getIssueById(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIssueById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetIssueByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getIssueById>>>;
export type GetIssueByIdQueryError = BadRequestResponse | NotFoundResponse | InternalErrorResponse;

export function useGetIssueById<
  TData = Awaited<ReturnType<typeof getIssueById>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIssueById>>,
          TError,
          Awaited<ReturnType<typeof getIssueById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetIssueById<
  TData = Awaited<ReturnType<typeof getIssueById>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getIssueById>>,
          TError,
          Awaited<ReturnType<typeof getIssueById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetIssueById<
  TData = Awaited<ReturnType<typeof getIssueById>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get issue by ID
 */

export function useGetIssueById<
  TData = Awaited<ReturnType<typeof getIssueById>>,
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getIssueById>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetIssueByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing issue by ID
 * @summary Update an issue
 */
export const updateIssue = (id: number, issueUpdateInput: IssueUpdateInput) => {
  return customAxiosInstance<Issue>({
    url: `/issues/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: issueUpdateInput,
  });
};

export const getUpdateIssueMutationOptions = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateIssue>>,
    TError,
    { id: number; data: IssueUpdateInput },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateIssue>>,
  TError,
  { id: number; data: IssueUpdateInput },
  TContext
> => {
  const mutationKey = ['updateIssue'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateIssue>>,
    { id: number; data: IssueUpdateInput }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateIssue(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateIssueMutationResult = NonNullable<Awaited<ReturnType<typeof updateIssue>>>;
export type UpdateIssueMutationBody = IssueUpdateInput;
export type UpdateIssueMutationError =
  | BadRequestResponse
  | NotFoundResponse
  | InternalErrorResponse;

/**
 * @summary Update an issue
 */
export const useUpdateIssue = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateIssue>>,
      TError,
      { id: number; data: IssueUpdateInput },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateIssue>>,
  TError,
  { id: number; data: IssueUpdateInput },
  TContext
> => {
  const mutationOptions = getUpdateIssueMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete an issue by ID
 * @summary Delete an issue
 */
export const deleteIssue = (id: number) => {
  return customAxiosInstance<DeleteIssue200>({ url: `/issues/${id}`, method: 'DELETE' });
};

export const getDeleteIssueMutationOptions = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteIssue>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteIssue>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteIssue'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteIssue>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteIssue(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteIssueMutationResult = NonNullable<Awaited<ReturnType<typeof deleteIssue>>>;

export type DeleteIssueMutationError =
  | BadRequestResponse
  | NotFoundResponse
  | InternalErrorResponse;

/**
 * @summary Delete an issue
 */
export const useDeleteIssue = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteIssue>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof deleteIssue>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteIssueMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Quick action to set issue status to resolved
 * @summary Resolve an issue
 */
export const resolveIssue = (id: number) => {
  return customAxiosInstance<Issue>({ url: `/issues/${id}/resolve`, method: 'PATCH' });
};

export const getResolveIssueMutationOptions = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resolveIssue>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resolveIssue>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['resolveIssue'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof resolveIssue>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return resolveIssue(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResolveIssueMutationResult = NonNullable<Awaited<ReturnType<typeof resolveIssue>>>;

export type ResolveIssueMutationError =
  | BadRequestResponse
  | NotFoundResponse
  | InternalErrorResponse;

/**
 * @summary Resolve an issue
 */
export const useResolveIssue = <
  TError = BadRequestResponse | NotFoundResponse | InternalErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resolveIssue>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof resolveIssue>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getResolveIssueMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
