/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Trial Issues API
 * API for managing clinical trial site visit issues
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type { DashboardCounts, InternalErrorResponse } from '.././models';

import { customAxiosInstance } from '../../axios-instance';

/**
 * Retrieve aggregated counts of issues by status and severity
 * @summary Get dashboard statistics
 */
export const getDashboard = (signal?: AbortSignal) => {
  return customAxiosInstance<DashboardCounts>({ url: `/dashboard`, method: 'GET', signal });
};

export const getGetDashboardInfiniteQueryKey = () => {
  return ['infinite', `/dashboard`] as const;
};

export const getGetDashboardQueryKey = () => {
  return [`/dashboard`] as const;
};

export const getGetDashboardInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboard>>>,
  TError = InternalErrorResponse,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDashboardInfiniteQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboard>>> = ({ signal }) =>
    getDashboard(signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDashboard>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboard>>>;
export type GetDashboardInfiniteQueryError = InternalErrorResponse;

export function useGetDashboardInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboard>>>,
  TError = InternalErrorResponse,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboard>>,
          TError,
          Awaited<ReturnType<typeof getDashboard>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDashboardInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboard>>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboard>>,
          TError,
          Awaited<ReturnType<typeof getDashboard>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDashboardInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboard>>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get dashboard statistics
 */

export function useGetDashboardInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDashboard>>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDashboardInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetDashboardQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = InternalErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDashboardQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboard>>> = ({ signal }) =>
    getDashboard(signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDashboard>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDashboardQueryResult = NonNullable<Awaited<ReturnType<typeof getDashboard>>>;
export type GetDashboardQueryError = InternalErrorResponse;

export function useGetDashboard<
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = InternalErrorResponse,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboard>>,
          TError,
          Awaited<ReturnType<typeof getDashboard>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDashboard<
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDashboard>>,
          TError,
          Awaited<ReturnType<typeof getDashboard>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDashboard<
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary Get dashboard statistics
 */

export function useGetDashboard<
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = InternalErrorResponse,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData>>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDashboardQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
